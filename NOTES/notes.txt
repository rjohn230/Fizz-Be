
* hidden
** not stored
<.*> LIST
 
MEMBER
	- email STRING
	- username STRING
	- salt STRING  *
	- salypassword STRING *
	- preferences <PREFERENCE> 1:MANY
	- created_IDEA <IDEA> 1:MANY
	- followed_IDEA <IDEA> 1:MANY
	- seen_IDEA <IDEA> 1:MANY
	- created_retorts <RETORT> 1:MANY
	- avatar_url STRING
	- moto STRING
	- identity STRING
	
	
ENUM CATEGORY
 {
	MOVIES,
	TECHNOLOGY,
	TBD
 }

 
PREFERENCE
	- category CATEGORY
	- weight  INT
	- owner MEMBER
	- id LONG
	
IDEA
	- creator MEMBER
	- timestamp Date
	- categories <CATEGORY>
	- title STRING
	- descrption STRING
	- retorts <RETORT> 1:MANY
	- rating RATING 1:1
	- id LONG

RETORT
	- content STRING
	- thread <MESSAGE> 1:MANY
	- creator MEMBER 
	- idea IDEA 
	- id LONG
	
	
MESSAGE
	- creator MEMBER
	- comment STRING 
	- id LONG

MEM_IDEA	(**)
{
	 idea IDEA
	 score DOUBLE
}

populateIdeas POST MEMBER
{
	ideas = getAllIdeas()
	mem_ideas = scoreIdeas(<IDEA>,MEMBER)
	mem_ideas = mergeSortHigh(<IDEA>)
	return mem_ideas
}

private scoreIdeas (<IDEA>,MEMBER)
{
	for each idea in ideas
	{
		mem_ideas = new MEM_IDEA(idea,member)
	}
}

private MEM_IDEA(idea,member)
{
	this.idea = idea
	this.score = 0.0
	for each preference in member.preferences
		if iddea.has preference
		score += 10
	scoreWithIdea(idea,followed_IDEA)
	scoreWithIdea(idea,created_IDEA)
	if member.seen_IDEA.has(idea)
		score-=150
	double age = new Date().days- idea.timestamp.days
	score -= age*8.31 
}

private scoreWithIdea(value,ideas)
{
	for each idea in ideas
		for each cat in categories
			if value.categories.has cat
				this.score += 5
}

public class Runner {
	
	@SuppressWarnings("unused")
	private static List<Integer> numbers= new ArrayList<Integer>();
	private static Random rand = new Random();

	public static void main(String[] args) {
		
		populateNumbers();
		
		List<Integer> sorted = mergeSort(numbers);
		
		System.out.print(sorted);
	}

	private static void populateNumbers() {
		for(int i = 0; i<rand.nextInt(1000000);i++)
		{
			numbers.add(rand.nextInt(100000));
		}
		
	}

	private static List<Integer> mergeSort(List<Integer> num) {
		
		int size = num.size();
		int middle = size/2;
		
		if(size==1)
			return num;
		
		List<Integer> left = mergeSort(num.subList(0, middle));
		List<Integer> right = mergeSort(num.subList(middle,size));
		
		return merge(left,right);
	}

	private static List<Integer> merge(List<Integer> left, List<Integer> right) {
		List<Integer> result = new ArrayList<>();
		
		int size = left.size()+right.size();
		int left_limt = left.size();
		int right_limt = right.size();
		int right_count =0;
		int left_count=0;
		
		for(int i =0; i < size; i++)
		{
			if(left_count == left_limt)
			{
				result.addAll(right.subList(right_count, right_limt));
				break;
			}
			if(right_count == right_limt)
			{
				result.addAll(left.subList(left_count, left_limt));
				break;
			}
			
			int left_value = left.get(left_count);
			int right_value = right.get(right_count);
			
			if(left_value <= right_value)
			{
				result.add(left_value);
				left_count++;
			}
			else {
				result.add(right_value);
				right_count++;
			}
			
		}
		
		return result;
	}

}

 

	